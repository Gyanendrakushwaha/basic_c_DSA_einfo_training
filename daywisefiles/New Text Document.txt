///////////////////////////////////////////1. converter  ////////////////////////////////////////
#include <assert.h>
#include <ctype.h>
#include <limits.h>
#include <math.h>
#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

int main(){
int t;
scanf("%d",&t);
char arr[t][100000];
//printf("%d",t);
for(int i=0;i<t;i++){
scanf("%s",arr[i]);
}
for(int i=0;i<t;i++){
// printf("%s\n",arr[i]);
int j=0;
while(arr[i][j]!='\0'){
int c=arr[i][j];
c=97+(122%c);
printf("%c",c);
j++;
}
printf("\n");
}
}
///////////////////////////////////////////1. converter  ////////////////////////////////////////
#include <assert.h>
#include <ctype.h>
#include <limits.h>
#include <math.h>
#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

int main(){
int t;
scanf("%d",&t);
char arr[t][100000];
//printf("%d",t);
for(int i=0;i<t;i++){
scanf("%s",arr[i]);
}
for(int i=0;i<t;i++){
// printf("%s\n",arr[i]);
int j=0;
while(arr[i][j]!='\0'){
int c=arr[i][j];
c=97+(122%c);
printf("%c",c);
j++;
}
printf("\n");


////////////////////////////////////////////////2. : SHORT NAME CONFUSION  ////////////////////////////////

#include <assert.h>
#include <ctype.h>
#include <limits.h>
#include <math.h>
#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
char* ltrim(char* str) {
if (!str) {
return '\0';
}
if (!*str) {
return str;
}
while (*str != '\0' && isspace(*str)) {
str++;
}
return str;
}
char* rtrim(char* str) {
if (!str) {
return '\0';
}
if (!*str) {
return str;
}
char* end = str + strlen(str) - 1;
while (end >= str && isspace(*end)) {
end--;
}
*(end + 1) = '\0';
return str;
}
int parse_int(char* str) {
char* endptr;
int value = strtol(str, &endptr, 10);
if (endptr == str || *endptr != '\0') {
exit(EXIT_FAILURE);
}
return value;
}
char* readline();
/*
* Complete the 'solve' function below.
*
* The function is expected to return a STRING.
* The function accepts STRING_ARRAY arr as parameter.
*/
char* solve(int arr_count, char** arr) {
// Write your code here
//printf("%c",**arr);
int flag=0;
for(int i=0;i<arr_count-1;i++){
if(arr[i][0]==arr[i+1][0]){
flag=1;
break;
}
}
if(flag==0){
return "ALL IZZ WELL";
}else{
return "OH SHIT";
}
}
int main()
{
int arr_count = parse_int(ltrim(rtrim(readline())));
char** arr = malloc(arr_count * sizeof(char*));
for (int i = 0; i < arr_count; i++) {
char* arr_item = readline();
*(arr + i) = arr_item;
}
char* result = solve(arr_count, arr);
printf("%s\n", result);
return 0;
}
char* readline() {
size_t alloc_length = 1024;
size_t data_length = 0;
char* data = malloc(alloc_length);
while (true) {
char* cursor = data + data_length;
char* line = fgets(cursor, alloc_length - data_length, stdin);
if (!line) {
break;
}
data_length += strlen(cursor);
if (data_length < alloc_length - 1 || data[data_length - 1] == '\n') {
break;
}
alloc_length <<= 1;
data = realloc(data, alloc_length);
if (!data) {
data = '\0';
break;
}
}
if (data[data_length - 1] == '\n') {
data[data_length - 1] = '\0';
data = realloc(data, data_length);
if (!data) {
data = '\0';
}
} else {
data = realloc(data, data_length + 1);
if (!data) {
data = '\0';
} else {
data[data_length] = '\0';
}
}
return data;
}


/////////////////////////////////////////////////  3. Identify the boring task_2023  /////////////////////////

#include <assert.h>
#include <ctype.h>
#include <limits.h>
#include <math.h>
#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
char* identifyTheTask(int arr[],int n ,int k) {
// write the solution here..
for(int i=0;i<n;i++){
for(int j=i+1;j<k;j++){
if(arr[i]==arr[j]){
return "Boring";
}
}
}
return "Exciting";
}
int main()
{
int n,k;
scanf("%d %d",&n,&k);
int arr[n];
for(int i=0;i<n;i++)
scanf("%d",&arr[i]);
char* result = identifyTheTask(arr,n,k);
printf("%s", result);
return 0;
}
///////////////////////////////////////////1. converter  ////////////////////////////////////////
#include <assert.h>
#include <ctype.h>
#include <limits.h>
#include <math.h>
#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

int main(){
int t;
scanf("%d",&t);
char arr[t][100000];
//printf("%d",t);
for(int i=0;i<t;i++){
scanf("%s",arr[i]);
}
for(int i=0;i<t;i++){
// printf("%s\n",arr[i]);
int j=0;
while(arr[i][j]!='\0'){
int c=arr[i][j];
c=97+(122%c);
printf("%c",c);
j++;
}
printf("\n");


////////////////////////////////////////////////2. : SHORT NAME CONFUSION  ////////////////////////////////

#include <assert.h>
#include <ctype.h>
#include <limits.h>
#include <math.h>
#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
char* ltrim(char* str) {
if (!str) {
return '\0';
}
if (!*str) {
return str;
}
while (*str != '\0' && isspace(*str)) {
str++;
}
return str;
}
char* rtrim(char* str) {
if (!str) {
return '\0';
}
if (!*str) {
return str;
}
char* end = str + strlen(str) - 1;
while (end >= str && isspace(*end)) {
end--;
}
*(end + 1) = '\0';
return str;
}
int parse_int(char* str) {
char* endptr;
int value = strtol(str, &endptr, 10);
if (endptr == str || *endptr != '\0') {
exit(EXIT_FAILURE);
}
return value;
}
char* readline();
/*
* Complete the 'solve' function below.
*
* The function is expected to return a STRING.
* The function accepts STRING_ARRAY arr as parameter.
*/
char* solve(int arr_count, char** arr) {
// Write your code here
//printf("%c",**arr);
int flag=0;
for(int i=0;i<arr_count-1;i++){
if(arr[i][0]==arr[i+1][0]){
flag=1;
break;
}
}
if(flag==0){
return "ALL IZZ WELL";
}else{
return "OH SHIT";
}
}
int main()
{
int arr_count = parse_int(ltrim(rtrim(readline())));
char** arr = malloc(arr_count * sizeof(char*));
for (int i = 0; i < arr_count; i++) {
char* arr_item = readline();
*(arr + i) = arr_item;
}
char* result = solve(arr_count, arr);
printf("%s\n", result);
return 0;
}
char* readline() {
size_t alloc_length = 1024;
size_t data_length = 0;
char* data = malloc(alloc_length);
while (true) {
char* cursor = data + data_length;
char* line = fgets(cursor, alloc_length - data_length, stdin);
if (!line) {
break;
}
data_length += strlen(cursor);
if (data_length < alloc_length - 1 || data[data_length - 1] == '\n') {
break;
}
alloc_length <<= 1;
data = realloc(data, alloc_length);
if (!data) {
data = '\0';
break;
}
}
if (data[data_length - 1] == '\n') {
data[data_length - 1] = '\0';
data = realloc(data, data_length);
if (!data) {
data = '\0';
}
} else {
data = realloc(data, data_length + 1);
if (!data) {
data = '\0';
} else {
data[data_length] = '\0';
}
}
return data;
}


/////////////////////////////////////////////////  3. Identify the boring task_2023  /////////////////////////

#include <assert.h>
#include <ctype.h>
#include <limits.h>
#include <math.h>
#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
char* identifyTheTask(int arr[],int n ,int k) {
// write the solution here..
for(int i=0;i<n;i++){
for(int j=i+1;j<k;j++){
if(arr[i]==arr[j]){
return "Boring";
}
}
}
return "Exciting";
}
int main()
{
int n,k;
scanf("%d %d",&n,&k);
int arr[n];
for(int i=0;i<n;i++)
scanf("%d",&arr[i]);
char* result = identifyTheTask(arr,n,k);
printf("%s", result);
return 0;
}

////////////////////////////////////////////////2. : SHORT NAME CONFUSION  ////////////////////////////////

#include <assert.h>
#include <ctype.h>
#include <limits.h>
#include <math.h>
#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
char* ltrim(char* str) {
if (!str) {
return '\0';
}
if (!*str) {
return str;
}
while (*str != '\0' && isspace(*str)) {
str++;
}
return str;
}
char* rtrim(char* str) {
if (!str) {
return '\0';
}
if (!*str) {
return str;
}
char* end = str + strlen(str) - 1;
while (end >= str && isspace(*end)) {
end--;
}
*(end + 1) = '\0';
return str;
}
int parse_int(char* str) {
char* endptr;
int value = strtol(str, &endptr, 10);
if (endptr == str || *endptr != '\0') {
exit(EXIT_FAILURE);
}
return value;
}
char* readline();
/*
* Complete the 'solve' function below.
*
* The function is expected to return a STRING.
* The function accepts STRING_ARRAY arr as parameter.
*/
char* solve(int arr_count, char** arr) {
// Write your code here
//printf("%c",**arr);
int flag=0;
for(int i=0;i<arr_count-1;i++){
if(arr[i][0]==arr[i+1][0]){
flag=1;
break;
}
}
if(flag==0){
return "ALL IZZ WELL";
}else{
return "OH SHIT";
}
}
int main()
{
int arr_count = parse_int(ltrim(rtrim(readline())));
char** arr = malloc(arr_count * sizeof(char*));
for (int i = 0; i < arr_count; i++) {
char* arr_item = readline();
*(arr + i) = arr_item;
}
char* result = solve(arr_count, arr);
printf("%s\n", result);
return 0;
}
char* readline() {
size_t alloc_length = 1024;
size_t data_length = 0;
char* data = malloc(alloc_length);
while (true) {
char* cursor = data + data_length;
char* line = fgets(cursor, alloc_length - data_length, stdin);
if (!line) {
break;
}
data_length += strlen(cursor);
if (data_length < alloc_length - 1 || data[data_length - 1] == '\n') {
break;
}
alloc_length <<= 1;
data = realloc(data, alloc_length);
if (!data) {
data = '\0';
break;
}
}
if (data[data_length - 1] == '\n') {
data[data_length - 1] = '\0';
data = realloc(data, data_length);
if (!data) {
data = '\0';
}
} else {
data = realloc(data, data_length + 1);
if (!data) {
data = '\0';
} else {
data[data_length] = '\0';
}
}
return data;
}


/////////////////////////////////////////////////  3. Identify the boring task_2023  /////////////////////////

#include <assert.h>
#include <ctype.h>
#include <limits.h>
#include <math.h>
#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
char* identifyTheTask(int arr[],int n ,int k) {
// write the solution here..
for(int i=0;i<n;i++){
for(int j=i+1;j<k;j++){
if(arr[i]==arr[j]){
return "Boring";
}
}
}
return "Exciting";
}
int main()
{
int n,k;
scanf("%d %d",&n,&k);
int arr[n];
for(int i=0;i<n;i++)
scanf("%d",&arr[i]);
char* result = identifyTheTask(arr,n,k);
printf("%s", result);
return 0;
}